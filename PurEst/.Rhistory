mod <- lmer(data=file2, mass ~ hornAv + sex  + (1|month))
#The anova table and the estimates of the model are calculated
anova(mod)
summary(mod)
#The r squared values for the model are determined and printed
rsq <- r.squaredGLMM(mod)
cat("The conditional R squared value is ",rsq[1,2], ", and the marginal value is ",rsq[1,1],".")
cat("The variance explained by the fixed variables is:",(rsq[1,1]/rsq[1,2])*100, "%")
cat("The variance explained by the random variables is:",(1-(rsq[1,1]/rsq[1,2]))*100, "%")
#Plotting the model without random effect
par(mfrow=c(1,2))
#A model without the random effect will be plotted
mod <- lm(data=file2, mass ~ hornAv + sex)
#The values to be predicted are created
new_hornAv = seq(0,300,by=1)
#The values are predicted and stored
mod_F <- predict.lm(mod, list(hornAv=new_hornAv,sex=rep(as.factor("F"),times=length(new_hornAv))),type="response")
mod_M <- predict.lm(mod, list(hornAv=new_hornAv,sex=rep(as.factor("M"),times=length(new_hornAv))),type="response")
#THe plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$log_hornAv,file2[file2$sex=="F",]$log_mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="Mass (kg)",ylim=c(0,45))
#THe plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$hornAv,file2[file2$sex=="F",]$log_mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="Mass (kg)",ylim=c(0,45))
lines(new_hornAv,mod_F, col="lightblue",lwd=3)
#A model without the random effect will be plotted
mod <- lm(data=file2, mass ~ hornAv + sex)
#The values to be predicted are created
new_hornAv = seq(0,300,by=1)
#The values are predicted and stored
mod_F <- predict.lm(mod, list(hornAv=new_hornAv,sex=rep(as.factor("F"),times=length(new_hornAv))),type="response")
mod_M <- predict.lm(mod, list(hornAv=new_hornAv,sex=rep(as.factor("M"),times=length(new_hornAv))),type="response")
#THe plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$hornAv,file2[file2$sex=="F",]$log_mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="Mass (kg)",ylim=c(0,45))
lines(new_hornAv,mod_F, col="lightblue",lwd=3)
plot(file2[file2$sex=="M",]$hornAv,file2[file2$sex=="M",]$mass,pch=20,main="MALE", xlab="Horn av. length (mm)",ylab="Mass (kg)",ylim=c(0,45))
lines(new_hornAv,mod_M,col="lightblue",lwd=3)
#A ANCOVA model with
mod <- lmer(data=file2, mass ~ hornAv * sex  + (1|month))
#The anova table and the estimates of the model are calculated
anova(mod)
summary(mod)
#The r squared values for the model are determined and printed
rsq <- r.squaredGLMM(mod)
cat("The conditional R squared value is ",rsq[1,2], ", and the marginal value is ",rsq[1,1],".")
cat("The variance explained by the fixed variables is:",(rsq[1,1]/rsq[1,2])*100, "%")
cat("The variance explained by the random variables is:",(1-(rsq[1,1]/rsq[1,2]))*100, "%")
#A model without the random effect will be plotted
mod <- lm(data=file2, mass ~ hornAv + sex)
#The values to be predicted are created
new_hornAv = seq(0,300,by=1)
#The values are predicted and stored
mod_F <- predict.lm(mod, list(hornAv=new_hornAv,sex=rep(as.factor("F"),times=length(new_hornAv))),type="response")
mod_M <- predict.lm(mod, list(hornAv=new_hornAv,sex=rep(as.factor("M"),times=length(new_hornAv))),type="response")
#THe plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$hornAv,file2[file2$sex=="F",]$log_mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="Mass (kg)",ylim=c(0,45))
#THe plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$hornAv,file2[file2$sex=="F",]$mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="Mass (kg)",ylim=c(0,45))
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
plot(file2$mass,log(file2$hornAv))
plot(log(file2$mass),file2$hornAv)
file2$log_mass <- log(file2$mass)
#A ANCOVA model with
mod <- lmer(data=file2, log_mass ~ hornAv + sex  + (1|month))
#The anova table and the estimates of the model are calculated
anova(mod)
summary(mod)
#The r squared values for the model are determined and printed
rsq <- r.squaredGLMM(mod)
cat("The conditional R squared value is ",rsq[1,2], ", and the marginal value is ",rsq[1,1],".")
cat("The variance explained by the fixed variables is:",(rsq[1,1]/rsq[1,2])*100, "%")
cat("The variance explained by the random variables is:",(1-(rsq[1,1]/rsq[1,2]))*100, "%")
summary(mod)
plot(file2$hornAv,log(file2$mass))
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
boxplot(file2$log_mass~file2$month, data = list(file2$log_mass,file2$month),xlab="Capture month",ylab="Mass (kg)")
#Boxplots of the log(mass) in the different capture months are plotted
par(mfrow=c(1,1))
boxplot(file2$log_mass~file2$month, data = list(file2$log_mass,file2$month),xlab="Capture month",ylab="log Mass (log kg)")
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
#The r squared values for the model are determined and printed
rsq <- r.squaredGLMM(mod)
cat("The conditional R squared value is ",rsq[1,2], ", and the marginal value is ",rsq[1,1],".")
cat("The conditional R squared value is ",rsq[1,2], ", and the marginal value is ",rsq[1,1],".")
cat("The variance explained by the fixed variables is:",(rsq[1,1]/rsq[1,2])*100, "%")
cat("The variance explained by the random variables is:",(1-(rsq[1,1]/rsq[1,2]))*100, "%")
cat("The conditional R squared value is ",rsq[1,2], ", and the marginal value is ",rsq[1,1],".")
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
#The r squared values for the model are determined and printed
rsq <- r.squaredGLMM(mod)
cat("The conditional R squared value is ",rsq[1,2], ", and the marginal value is ",rsq[1,1],".")
cat("The variance explained by the fixed variables is:",(rsq[1,1]/rsq[1,2])*100, "%")
cat("The variance explained by the random variables is:",(1-(rsq[1,1]/rsq[1,2]))*100, "%")
#A ANCOVA model with
mod <- lmer(data=file2, log_mass ~ hornAv + sex  + (1|month))
#The anova table and the estimates of the model are calculated
anova(mod)
summary(mod)
log(10)
m1 <- glmmTMB(data=file2, mass ~ hornAv + sex  + (1|month), family="log")
library(glmmTMB)
m1 <- glmmTMB(data=file2, mass ~ hornAv + sex  + (1|month), family="log")
m1 <- glmmTMB(data=file2, mass ~ hornAv + sex  + (1|month), family=log)
m1 <- glmmTMB(data=file2, mass ~ hornAv + sex  + (1|month), family=logit)
m1 <- glmmTMB(data=file2, mass ~ hornAv + sex  + (1|month), family=nbinom2)
anova(m1)
summary(m1)
m1 <- glmmTMB(data=file2, mass ~ hornAv + sex  + (1|month), link="log")
#The plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$hornAv,file2[file2$sex=="F",]$mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="log Mass (log kg)",ylim=c(1.5,4))
#The plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$hornAv,file2[file2$sex=="F",]$mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="log Mass (log kg)",ylim=c(1.5,40))
#The plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$hornAv,file2[file2$sex=="F",]$mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="log Mass (log kg)",ylim=c(1.5,40))
lines(new_hornAv,log(mod_F), col="lightblue",lwd=3)
lines(new_hornAv,e()^(mod_F), col="lightblue",lwd=3)
#The plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$hornAv,file2[file2$sex=="F",]$mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="log Mass (log kg)",ylim=c(1.5,40))
#The plots are created for MALE and FEMALE goats
plot(file2[file2$sex=="F",]$hornAv,file2[file2$sex=="F",]$mass, pch=20, main="FEMALE", xlab="Horn av. length (mm)",ylab="log Mass (log kg)",ylim=c(1.5,40))
lines(new_hornAv,exp(mod_F), col="lightblue",lwd=3)
plot(file2[file2$sex=="M",]$hornAv,file2[file2$sex=="M",]$mass,pch=20,main="MALE", xlab="Horn av. length (mm)",ylab="log Mass (log kg)",ylim=c(1.5,40))
lines(new_hornAv,exp(mod_M),col="lightblue",lwd=3)
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part2.R", echo=TRUE)
#The anova table and the estimates of the model are calculated
anova(mod)
summary(mod)
plot(data=file1, log(GSD),log(GAD))
#The data file is read and stored as file 1
file1 <- read.csv("/home/isc/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/exam2022_part1.csv")
plot(data=file1, log(GSD),log(ASD))
View(file1)
source("~/Current_courses/Processing_and_Analysis_of_Biological_Data/Exam/Part1.R", echo=TRUE)
plot(log(file1$GSD),log(file1$ASD))
#The anova table and the estimates of the model are calculated
anova(mod)
summary(mod)
install.packages("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
library(gplots)
install.packages("gplots")
install.packages("RColorBrewer")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
if (!require("BiocManager", quietly = TRUE))
#The cluster created is stopped
parallel::stopCluster(cl = my.cluster)
if (!require("BiocManager", quietly = TRUE))
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
install.packages("curl")
BiocManager::install("DESeq2")
install.packages("curl-config")
install.packages("curl")
R.version()
r --version
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("DESeq2")
rm(list = ls())
effect <- sample.int(["Benign","Pathogenic"],size=1600 , replace=TRUE, )
effect <- sample.int(("Benign","Pathogenic"),size=1600 , replace=TRUE, )
effect <- sample(("Benign","Pathogenic"),size=1600 , replace=TRUE, )
a <- (2,3,4)
effect <- sample(c("Benign","Pathogenic"),size=1600 , replace=TRUE, )
print(effect)
len(soft_ls)
soft_ls <- list(soft_1, soft_2, soft_3, soft_4)
soft_1 <- dunif(1600) + dnorm(1600, 0.1, 1)
soft_2 <- dunif(1600) + dnorm(1600, 0.5, 1)
soft_3 <- dunif(1600) + dnorm(1600, 0.-0.6, 1)
soft_4 <- dunif(1600) + dnorm(1600, 0, 1)
soft_ls <- list(soft_1, soft_2, soft_3, soft_4)
length(soft_ls)
soft_ls[1]
soft_ls[[1]}
soft_ls[[1]]
soft_ls$1
soft_ls[[1]]
print(soft_ls[[1]])
print(soft_ls)
soft_1 <- dunif(1600) + dnorm(1600, 0.1, 1)
soft_2 <- dunif(1600) + dnorm(1600, 0.5, 1)
soft_3 <- dunif(1600) + dnorm(1600, 0.-0.6, 1)
soft_1 <- dunif(size=1600) + dnorm(1600, 0.1, 1)
soft_1 <- dunif(1600, max=1, min=0) + dnorm(1600, 0.1, 1)
soft_1 <- dunif(n=1600, max=1, min=0) + dnorm(1600, 0.1, 1)
soft_1 <- runif(n=1600, max=1, min=0) + dnorm(1600, 0.1, 1)
soft_1 <- runif(n=1600, max=1, min=0) + dnorm(n=1600, mean=0.1, sd=1)
soft_1 <- runif(n=1600, max=1, min=0) + rnorm(n=1600, mean=0.1, sd=1)
soft_4 <- runif(n=1600, max=1, min=0) + rnorm(n=1600, mean=0, sd=1)
soft_2 <- runif(n=1600, max=1, min=0) + rnorm(n=1600, mean=0.5, sd=1)
soft_3 <- runif(n=1600, max=1, min=0) + rnorm(n=1600, mean=-0.6, sd=1)
soft_ls <- list(soft_1, soft_2, soft_3, soft_4)
View(soft_ls)
length(soft_1)
print(soft_ls[[1]])
source("~/.active-rstudio-document", echo=TRUE)
length(soft_ls[[1]]
print(length(soft_ls[[1]])
print(length(soft_ls[[1]])
print(length(soft_ls[[1]])
print(length(soft_ls[[1]]))
for (software in 1:4) {
for (software in 1:4) {
soft_ls <- list(soft_1, soft_2, soft_3, soft_4)
for (software in 1:4) {
for (index in 1:length(soft_ls[[software]])) {
if (soft_ls[[software]][index] < 0) {
soft_ls[[software]][index] = 0
}
else if (soft_ls[[software]] > 1) {
soft_ls[[software]] = 1
}
}
}
print(length(soft_ls[[1]]))
library(shiny); runApp('Desktop/Pop_gen_complete/variant_tracker_app.R')
runApp('Desktop/test_app.R')
runApp('Desktop/test_app.R')
runApp('Desktop/test_app.R')
runApp('Desktop/test_app.R')
runApp('Desktop/test_app.R')
runApp('Desktop/test_app.R')
library(shiny); runApp('Desktop/test.r')
runApp('Desktop/test.r')
runApp('Desktop/test.r')
runApp('Desktop/test.r')
runApp('Desktop/test.r')
runApp('Desktop/Pop_gen_complete/variant_tracker_app.R')
runApp('Desktop/test.r')
library(shiny); runApp('Desktop/Pop_gen_complete/variant_tracker_app.R')
runApp('Desktop/Pop_gen_complete/variant_tracker_app.R')
library(shiny); runApp('Desktop/Pop_gen_complete/variant_tracker_app.R')
runApp('Desktop/Pop_gen_complete/variant_tracker_app.R')
install.packages("pbapply")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
pbtypes()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("doSNOW")
library(doSNOW)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("Kendall")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# create a sample data frame
df <- data.frame(x = 1:10, y = c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2))
# fit a loess curve to the data
fit <- loess(y ~ x, df)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
# create a sample data frame
df <- data.frame(x = 1:10, y = c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2))
# fit a loess curve to the data
fit <- loess(y ~ x, df)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
# create a sample data frame
df <- data.frame(x = 1:10, y = c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2))
# fit a loess curve to the data
fit <- loess(y ~ x, df)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
# create a sample data frame
df <- data.frame(x = 1:10, y = c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2))
# fit a loess curve to the data
fit <- loess(y ~ x, df)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
# create a sample data frame
df <- data.frame(x = 1:10, y = c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2))
# fit a loess curve to the data
fit <- loess(y ~ x, df)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
fit
plot(fit)
plot(fit)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
lines(predict(fit))
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
# fit a loess curve to the data
fit <- lowess(y ~ x, df)
# create a sample data frame
df <- data.frame(x = 1:10, y = c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2))
# fit a loess curve to the data
fit <- lowess(y ~ x, df)
# create a sample data frame
df <- data.frame(x = seq(1,10by=0.01), y = rep(c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2),100)
# create a sample data frame
df <- data.frame(x = seq(1,10,by=0.01), y = rep(c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2),100)
# fit a loess curve to the data
fit <- lowess(y ~ x, df)
# fit a loess curve to the data
fit <- loess(y ~ x, df)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
# create a sample data frame
df <- data.frame(x = seq(1,10,by=0.01), y = rep(c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2),100)
# fit a loess curve to the data
fit <- loess(y ~ x, df)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
# create a sample data frame
df <- data.frame(x = seq(1,10,by=0.01), y = rep(c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2),100)
# fit a loess curve to the data
fit <- loess(y ~ x, df)
# create a sample data frame
df <- data.frame(x = seq(1,10,by=0.01), y = rep(c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2),100))
# create a sample data frame
df <- data.frame(x = seq(0,10,by=0.01), y = rep(c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2),100))
# create a sample data frame
df <- data.frame(x = seq(0.01,10,by=0.01), y = rep(c(1, 2, 3, 5, 8, 10, 9, 7, 4, 2),100))
# fit a loess curve to the data
fit <- loess(y ~ x, df)
# plot the data points and the fitted curve
plot(df$x, df$y, pch = 16)
lines(predict(fit))
a <- c(3,4,6,8)
b <- c(1,2,3,4)
cor(a,b)
my_df <- data.frame()
b <- c(1,2,3)
my_df <- rbind(my_df, b)
a <- c(3.5,4.5,6.5,8.5)
b <- c(1,2,3,4)
cor(a,b)
my_df <- data.frame()
b <- c(1,2,3)
my_df <- rbind(my_df, b)
a <- c(1,2,3,4)
b <- c(1,2,3,4)
cor(a,b)
my_df <- data.frame()
b <- c(1,2,3)
my_df <- rbind(my_df, b)
a <- c(1.5,2.5,3.5,4.5)
b <- c(1,2,3,4)
cor(a,b)
my_df <- data.frame()
b <- c(1,2,3)
my_df <- rbind(my_df, b)
cor(a,b)
a <- c(1.5,2.5,3.5,4.5)
b <- c(1,2,3,4)
cor(a,b)
a <- c(2,3,4,5)
b <- c(1,2,3,4)
cor(a,b)
my_df <- data.frame()
b <- c(1,2,3)
my_df <- rbind(my_df, b)
a <- c(2,3,4,5)
b <- c(1,2,3,4)
cor(a,b)
annotation = rowAnnotation(Phenotype = intensities[,"Phenotype"])
Heatmap(apply(intensities[, c(2,3,4,5,7)], 2, scale_0_1),
name = "Marker intensities",
left_annotation=annotation,
cluster_columns = FALSE,
cluster_rows = FALSE,
row_order = order(intensities[,"Phenotype"])
)
source("~/Spatial_immune_env/vectra/compare_counts_with_annotation.r")
library(ggplot2)
library(ggpubr)
mIHC_counts <- read.csv("/home/isc/Spatial_immune_env/vectra/segmentation_and_phenotyping/cell_counts/cell_count_dataframe.csv")
annotation_file <- read.csv2("/home/isc/Spatial_immune_env/data_from_suze/data/supplData_withimages.csv")
rownames(annotation_file) <- annotation_file$uid
vector_of_counts <- as.numeric(mIHC_counts$CD68 + mIHC_counts$CD68_FOXP3)
# Vector of CD20 paths
vector_of_counts <- log(mIHC_counts$CD20 + mIHC_counts$CD20_FOXP3 +1) # Adding one to avoid getting -Inf
vector_of_CD20_path <- as.factor(unname(sapply(mIHC_counts$TMArQ_CORE_ID, function(core) annotation_file[core, "CD20path"])))
#General kruskal willis test
kruskal_res <- kruskal.test(vector_of_counts ~ vector_of_CD20_path)
pairwise_res <- compare_means(data = data.frame(vector_of_counts, vector_of_CD20_path),
vector_of_counts ~ vector_of_CD20_path,
method = "wilcox.test")
my_comparison <- list(c("0", "1"),c("1","2"), c("2","3"))
ggplot(data=na.omit(data.frame(vector_of_counts, vector_of_CD20_path)), aes(x=vector_of_CD20_path, y=vector_of_counts)) +
geom_violin(width=1.4, aes(fill=vector_of_CD20_path)) +
geom_jitter(size=0.75) +
geom_boxplot(width=0.05) +
labs(fill="Pathologist's score", x = "CD20 pathologist's score", y = "log B lymphocyte counts") +
annotate("text", x=3.75, y=1, label=paste0("Kruskal-Wallis p value: ", signif(kruskal_res$p.value, 2))) +
stat_compare_means(pairwise_res, comparisons = my_comparison) +
theme_classic()
ggplot(data=na.omit(data.frame(vector_of_counts, vector_of_CD20_path)), aes(x=vector_of_CD20_path, y=vector_of_counts)) +
geom_violin(width=1.4, aes(fill=vector_of_CD20_path)) +
geom_jitter(size=0.75, width=0.25) +
geom_boxplot(width=0.05) +
labs(fill="Pathologist's score", x = "CD20 pathologist's score", y = "log B lymphocyte counts") +
annotate("text", x=3.75, y=1, label=paste0("Kruskal-Wallis p value: ", signif(kruskal_res$p.value, 2))) +
stat_compare_means(pairwise_res, comparisons = my_comparison) +
theme_classic()
ggplot(data=na.omit(data.frame(vector_of_counts, vector_of_CD20_path)), aes(x=vector_of_CD20_path, y=vector_of_counts)) +
geom_violin(width=1.4, aes(fill=vector_of_CD20_path)) +
geom_jitter(size=0.75, width=0.1) +
geom_boxplot(width=0.05) +
labs(fill="Pathologist's score", x = "CD20 pathologist's score", y = "log B lymphocyte counts") +
annotate("text", x=3.75, y=1, label=paste0("Kruskal-Wallis p value: ", signif(kruskal_res$p.value, 2))) +
stat_compare_means(pairwise_res, comparisons = my_comparison) +
theme_classic()
a <- c(9)
isTRUE(a)
a <- c("")
isTRUE(a)
length(isTRUE(a))
a == ""
a <- c(1,2)
a==""
a <- FALSE
length()
length(a)
a <- NA
length(a)
length(na.omit(a))
install.packages("devtools")
install.packages("roxygen2")
rm(list = ls())
library(devtools)
install.packages("https://github.com/StaafLab/PurEst")
install.packages("https://github.com/StaafLab/PurEst/blob/main/PurEst_1.0.0.tar.gz")
install.packages("https://github.com/StaafLab/PurEst/tree/main/PurEst")
setwd("~/final_PurEst/PurEst/PurEst")
build()
build()
use_data_raw()
"example_data"
build()
install("/home/isc/final_PurEst/PurEst/PurEst_1.0.0.tar.gz")
install("/PurEst_1.0.0.tar.gz")
install("..//PurEst_1.0.0.tar.gz")
install("../PurEst_1.0.0.tar.gz")
library(PurEst)
load("~/final_PurEst/PurEst/PurEst/data-raw/example_data.RData")
getwd()
setwd("~/final_PurEst/PurEst/PurEst/data-raw")
load("example_data.RData")
saveRDS(example_betas_reference, "example_betas_reference.rds")
saveRDS(example_purities_reference, "example_purities_reference.rds")
saveRDS(example_betas_to_correct, "example_betas_to_correct.rds")
library(PurEst)
example_betas_reference
rm(list = ls())
library(PurEst)
example_betas_to_correct
library(roxygen2)
roxygenise()
library(PurEst)
library(devtools)
build()
install_github("https://github.com/StaafLab/PurEst/blob/main/PurEst_1.0.0.tar.gz")
install_github("https://github.com/StaafLab/PurEst/PurEst")
install_github("StaafLab/PurEst/PurEst")
install_github("StaafLab/PurEst/PurEst")
